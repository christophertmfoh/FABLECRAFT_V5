# FABLECRAFT SETUP GUIDE - PRODUCTION-READY EDITION

Building Fablecraft with a **scalable, maintainable architecture** optimized for creative companies.

## Quick Start

```bash
# Clone and setup
npx nuxi@latest init fablecraft-app
cd fablecraft-app

# Install pnpm
npm install -g pnpm

# Install all dependencies (copy from Phase 1, Step 1.3)
# Start development
pnpm dev
```

## Tech Stack Overview

### Core Framework
- **Nuxt 3** - Full-stack Vue framework with SSR/SSG capabilities
- **Vue 3** - Progressive JavaScript framework with Composition API
- **TypeScript** - Type safety and better developer experience

### Database & Backend
- **Supabase** - PostgreSQL database with real-time capabilities
- **pgvector** - Vector similarity search for AI-powered features
- **Edge Functions** - Serverless functions for API endpoints

### Styling & UI
- **Tailwind CSS v3** - Utility-first CSS framework
- **Shadcn-vue** - Copy-paste component library with Radix UI
- **Lucide Icons** - Beautiful & consistent icon set

### State Management
- **Pinia** - Official Vue.js state management
- **VueUse** - Collection of Vue Composition utilities

### Content Editor
- **Tiptap v2** - Headless rich text editor
- **ProseMirror** - Powerful document editing framework

### AI Integration
- **Gemini AI** - Google's AI for content generation
- **PiAPI** - Additional AI capabilities

### Development Tools
- **Vite** - Lightning-fast build tool
- **ESLint & Prettier** - Code quality and formatting
- **Vue DevTools** - Debugging and development

## Key Optimizations

### 1. **pgvector for AI Features**
- Semantic search across manuscripts
- AI-powered content recommendations
- Similar character/plot finding
- Intelligent content organization

### 2. **Server Architecture**
- Edge computing for global performance
- Server-side rendering for SEO
- API routes with middleware
- Real-time collaboration support

### 3. **Version Management**
- Git-based version control
- Automatic save with debouncing
- Conflict resolution system
- Rollback capabilities

## Phase 1: Project Foundation

### Step 1.1: Initialize Nuxt Project
```bash
# Create project with latest Nuxt
npx nuxi@latest init fablecraft-app
cd fablecraft-app

# Use pnpm for better performance
npm install -g pnpm
```

### Step 1.2: Configure Package Manager
Create `.npmrc`:
```
save-exact=true
auto-install-peers=true
```

### Step 1.3: Install Core Dependencies
```bash
# Core
pnpm add -D typescript @types/node

# Nuxt Modules
pnpm add -D @nuxtjs/tailwindcss@latest
pnpm add -D @pinia/nuxt@latest
pnpm add -D @vueuse/nuxt@latest
pnpm add -D @nuxtjs/google-fonts@latest
pnpm add -D @nuxt/eslint@latest
pnpm add -D @nuxt/image@latest

# Supabase
pnpm add @supabase/supabase-js@latest
pnpm add -D @nuxtjs/supabase@latest

# UI Components
pnpm add -D shadcn-nuxt@latest
pnpm add radix-vue@latest
pnpm add lucide-vue-next@latest
pnpm add class-variance-authority@latest
pnpm add clsx@latest
pnpm add tailwind-merge@latest

# Tailwind Plugins
pnpm add -D tailwindcss-animate @tailwindcss/typography

# Editor
pnpm add @tiptap/vue-3@latest
pnpm add @tiptap/pm@latest
pnpm add @tiptap/starter-kit@latest
pnpm add @tiptap/extension-collaboration@latest
pnpm add @tiptap/extension-placeholder@latest
pnpm add @tiptap/extension-character-count@latest
```

### Step 1.4: Project Structure
```
fablecraft-app/
├── app/                      # Nuxt 3 app directory
│   ├── components/          # Vue components
│   │   ├── ui/             # Shadcn components
│   │   ├── editor/         # Tiptap components
│   │   └── layout/         # Layout components
│   ├── composables/        # Vue composables
│   ├── layouts/            # App layouts
│   ├── pages/              # Route pages
│   ├── plugins/            # Nuxt plugins
│   └── utils/              # Utility functions
├── server/                  # Server directory
│   ├── api/                # API routes
│   ├── middleware/         # Server middleware
│   └── utils/              # Server utilities
├── public/                  # Static assets
├── assets/                  # Build-time assets
│   └── css/               # Global styles
├── stores/                  # Pinia stores
├── types/                   # TypeScript types
└── supabase/               # Database files
    ├── migrations/         # SQL migrations
    └── functions/          # Edge functions
```

## Phase 2: Tailwind CSS v3 Configuration

### Step 2.1: Initialize Tailwind
```bash
npx tailwindcss init
```

### Step 2.2: Configure tailwind.config.js
```javascript
import type { Config } from 'tailwindcss'
import animate from 'tailwindcss-animate'
import typography from '@tailwindcss/typography'

export default {
  darkMode: 'class',
  content: [
    './app/**/*.{js,vue,ts}',
    './components/**/*.{js,vue,ts}',
    './layouts/**/*.vue',
    './pages/**/*.vue',
    './plugins/**/*.{js,ts}',
    './nuxt.config.{js,ts}',
  ],
  theme: {
    extend: {
      colors: {
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
      },
      fontFamily: {
        sans: ['Inter', 'system-ui', 'sans-serif'],
        mono: ['JetBrains Mono', 'monospace'],
      },
    },
  },
  plugins: [animate, typography],
} satisfies Config
```

### Step 2.3: Create Global CSS
Create `assets/css/main.css`:
```css
@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 224 71.4% 4.1%;
    --card: 0 0% 100%;
    --card-foreground: 224 71.4% 4.1%;
    --popover: 0 0% 100%;
    --popover-foreground: 224 71.4% 4.1%;
    --primary: 220.9 39.3% 11%;
    --primary-foreground: 210 20% 98%;
    --secondary: 220 14.3% 95.9%;
    --secondary-foreground: 220.9 39.3% 11%;
    --muted: 220 14.3% 95.9%;
    --muted-foreground: 220 8.9% 46.1%;
    --accent: 220 14.3% 95.9%;
    --accent-foreground: 220.9 39.3% 11%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 20% 98%;
    --border: 220 13% 91%;
    --input: 220 13% 91%;
    --ring: 224 71.4% 4.1%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 224 71.4% 4.1%;
    --foreground: 210 20% 98%;
    --card: 224 71.4% 4.1%;
    --card-foreground: 210 20% 98%;
    --popover: 224 71.4% 4.1%;
    --popover-foreground: 210 20% 98%;
    --primary: 210 20% 98%;
    --primary-foreground: 220.9 39.3% 11%;
    --secondary: 215 27.9% 16.9%;
    --secondary-foreground: 210 20% 98%;
    --muted: 215 27.9% 16.9%;
    --muted-foreground: 217.9 10.6% 64.9%;
    --accent: 215 27.9% 16.9%;
    --accent-foreground: 210 20% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 20% 98%;
    --border: 215 27.9% 16.9%;
    --input: 215 27.9% 16.9%;
    --ring: 216 12.2% 83.9%;
  }
}
```

## Phase 3: Supabase Local Development

### Step 3.1: Install Supabase CLI
```bash
# Install via npm
npm install -g supabase

# Or via Homebrew (macOS)
brew install supabase/tap/supabase
```

### Step 3.2: Initialize Supabase
```bash
# Initialize local project
supabase init

# Start local development
supabase start
```

### Step 3.3: Create .env file
```env
SUPABASE_URL=http://localhost:54321
SUPABASE_ANON_KEY=your-anon-key
SUPABASE_SERVICE_KEY=your-service-key
DATABASE_URL=postgresql://postgres:postgres@localhost:54322/postgres
GEMINI_API_KEY=your-gemini-api-key
PIAPI_KEY=your-piapi-key
```

### Step 3.4: Create .env.example file
```env
# Copy this file to .env and fill in your actual values

# Supabase Configuration
SUPABASE_URL=
SUPABASE_ANON_KEY=
SUPABASE_SERVICE_KEY=
DATABASE_URL=

# AI Configuration
GEMINI_API_KEY=
PIAPI_KEY=
```

## Phase 4: Optimized Database Schema with pgvector

### Step 4.1: Enable pgvector Extension
Create `supabase/migrations/001_enable_pgvector.sql`:
```sql
-- Enable pgvector extension
CREATE EXTENSION IF NOT EXISTS vector;

-- Enable UUID generation
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
```

### Step 4.2: Core Database Schema
Create `supabase/migrations/002_core_schema.sql`:
```sql
-- Users table (extends Supabase auth.users)
CREATE TABLE public.profiles (
  id UUID REFERENCES auth.users(id) PRIMARY KEY,
  username TEXT UNIQUE NOT NULL,
  full_name TEXT,
  avatar_url TEXT,
  bio TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Projects table
CREATE TABLE public.projects (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) NOT NULL,
  title TEXT NOT NULL,
  description TEXT,
  genre TEXT,
  status TEXT DEFAULT 'draft',
  cover_image_url TEXT,
  settings JSONB DEFAULT '{}',
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Manuscripts table
CREATE TABLE public.manuscripts (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  project_id UUID REFERENCES public.projects(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  content JSONB NOT NULL, -- Tiptap JSON format
  content_text TEXT, -- Plain text for search
  content_embedding vector(1536), -- OpenAI embeddings
  word_count INTEGER DEFAULT 0,
  version INTEGER DEFAULT 1,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- World Bible entries
CREATE TABLE public.world_bible (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  project_id UUID REFERENCES public.projects(id) ON DELETE CASCADE,
  category TEXT NOT NULL, -- character, location, item, etc.
  name TEXT NOT NULL,
  description TEXT,
  attributes JSONB DEFAULT '{}',
  embedding vector(1536),
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create indexes for performance
CREATE INDEX idx_manuscripts_project ON manuscripts(project_id);
CREATE INDEX idx_manuscripts_embedding ON manuscripts USING ivfflat (content_embedding vector_cosine_ops);
CREATE INDEX idx_world_bible_project ON world_bible(project_id);
CREATE INDEX idx_world_bible_embedding ON world_bible USING ivfflat (embedding vector_cosine_ops);

-- Row Level Security
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.projects ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.manuscripts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.world_bible ENABLE ROW LEVEL SECURITY;

-- RLS Policies
CREATE POLICY "Users can view own profile" ON profiles
  FOR SELECT USING (auth.uid() = id);

CREATE POLICY "Users can update own profile" ON profiles
  FOR UPDATE USING (auth.uid() = id);

CREATE POLICY "Users can CRUD own projects" ON projects
  FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can CRUD own manuscripts" ON manuscripts
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM projects 
      WHERE projects.id = manuscripts.project_id 
      AND projects.user_id = auth.uid()
    )
  );
```

## Phase 5: Nuxt Configuration

### Step 5.1: Complete nuxt.config.ts
```typescript
export default defineNuxtConfig({
  // Future-proofing
  future: {
    compatibilityVersion: 4,
  },

  // Development
  devtools: { enabled: true },
  
  // TypeScript
  typescript: {
    strict: true,
    typeCheck: true,
  },

  // Modules
  modules: [
    '@nuxtjs/tailwindcss',
    '@pinia/nuxt',
    '@vueuse/nuxt',
    '@nuxtjs/google-fonts',
    '@nuxt/eslint',
    '@nuxt/image',
    '@nuxtjs/supabase',
    'shadcn-nuxt',
  ],

  // Supabase configuration
  supabase: {
    redirectOptions: {
      login: '/auth/login',
      callback: '/dashboard',
      exclude: ['/', '/auth/*'],
    },
  },

  // Shadcn configuration
  shadcn: {
    prefix: '',
    componentDir: './app/components/ui'
  },

  // Google Fonts
  googleFonts: {
    families: {
      Inter: [400, 500, 600, 700],
      'JetBrains Mono': [400, 500],
    },
  },

  // CSS
  css: ['~/assets/css/main.css'],

  // Build optimizations
  nitro: {
    compressPublicAssets: true,
    prerender: {
      crawlLinks: true,
    },
  },

  // Runtime config
  runtimeConfig: {
    // Private keys (server-only)
    supabaseServiceKey: process.env.SUPABASE_SERVICE_KEY,
    geminiApiKey: process.env.GEMINI_API_KEY,
    piApiKey: process.env.PIAPI_KEY,
    
    // Public keys (client + server)
    public: {
      supabaseUrl: process.env.SUPABASE_URL,
      supabaseAnonKey: process.env.SUPABASE_ANON_KEY,
    },
  },

  // App configuration
  app: {
    head: {
      title: 'Fablecraft - AI-Powered Writing Platform',
      meta: [
        { charset: 'utf-8' },
        { name: 'viewport', content: 'width=device-width, initial-scale=1' },
        { name: 'description', content: 'Create amazing stories with AI-powered tools' },
      ],
    },
  },
})
```

## Phase 6: Implementation Architecture

### Step 6.1: State Management with Pinia
Create `stores/auth.ts`:
```typescript
export const useAuthStore = defineStore('auth', () => {
  const user = ref<User | null>(null)
  const loading = ref(false)
  const supabase = useSupabaseClient()

  const signIn = async (email: string, password: string) => {
    loading.value = true
    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      })
      if (error) throw error
      user.value = data.user
      await navigateTo('/dashboard')
    } catch (error) {
      console.error('Sign in error:', error)
      throw error
    } finally {
      loading.value = false
    }
  }

  const signOut = async () => {
    await supabase.auth.signOut()
    user.value = null
    await navigateTo('/')
  }

  return {
    user: readonly(user),
    loading: readonly(loading),
    signIn,
    signOut,
  }
})
```

### Step 6.2: Composables Architecture
Create `composables/useProject.ts`:
```typescript
export const useProject = () => {
  const supabase = useSupabaseClient()
  
  const createProject = async (project: CreateProjectInput) => {
    const { data, error } = await supabase
      .from('projects')
      .insert(project)
      .select()
      .single()
    
    if (error) throw error
    return data
  }

  const getProjects = async () => {
    const { data, error } = await supabase
      .from('projects')
      .select('*')
      .order('updated_at', { ascending: false })
    
    if (error) throw error
    return data
  }

  const searchSimilarContent = async (projectId: string, query: string) => {
    const { data, error } = await supabase.rpc('search_similar_content', {
      project_id: projectId,
      query_text: query,
      match_threshold: 0.8,
      match_count: 5,
    })
    
    if (error) throw error
    return data
  }

  return {
    createProject,
    getProjects,
    searchSimilarContent,
  }
}
```

## Phase 7: Components & Composables

### Step 7.1: Initialize Shadcn-vue
```bash
npx shadcn-vue@latest init
```

### Step 7.2: Add Essential Components
```bash
# Core components
npx shadcn-vue@latest add button
npx shadcn-vue@latest add card
npx shadcn-vue@latest add dialog
npx shadcn-vue@latest add dropdown-menu
npx shadcn-vue@latest add input
npx shadcn-vue@latest add label
npx shadcn-vue@latest add select
npx shadcn-vue@latest add separator
npx shadcn-vue@latest add sheet
npx shadcn-vue@latest add tabs
npx shadcn-vue@latest add textarea
npx shadcn-vue@latest add toast
npx shadcn-vue@latest add tooltip
```

### Step 7.3: Create Editor Component
Create `components/editor/TiptapEditor.vue`:
```vue
<template>
  <div class="prose prose-lg max-w-none">
    <EditorContent :editor="editor" />
  </div>
</template>

<script setup lang="ts">
import { useEditor, EditorContent } from '@tiptap/vue-3'
import StarterKit from '@tiptap/starter-kit'
import Placeholder from '@tiptap/extension-placeholder'
import CharacterCount from '@tiptap/extension-character-count'

const props = defineProps<{
  modelValue: string
  placeholder?: string
}>()

const emit = defineEmits<{
  'update:modelValue': [value: string]
}>()

const editor = useEditor({
  content: props.modelValue,
  extensions: [
    StarterKit,
    Placeholder.configure({
      placeholder: props.placeholder || 'Start writing...',
    }),
    CharacterCount.configure({
      limit: 100000,
    }),
  ],
  onUpdate: ({ editor }) => {
    emit('update:modelValue', editor.getHTML())
  },
})

watch(() => props.modelValue, (value) => {
  if (editor.value && value !== editor.value.getHTML()) {
    editor.value.commands.setContent(value, false)
  }
})

onBeforeUnmount(() => {
  editor.value?.destroy()
})
</script>
```

## Phase 8: Development Scripts

### Step 8.1: Package.json Scripts
```json
{
  "scripts": {
    "dev": "nuxt dev",
    "build": "nuxt build",
    "preview": "nuxt preview",
    "postinstall": "nuxt prepare",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "typecheck": "nuxt typecheck",
    "db:start": "supabase start",
    "db:stop": "supabase stop",
    "db:reset": "supabase db reset",
    "db:migrate": "supabase migration up",
    "db:types": "supabase gen types typescript --local > types/database.ts",
    "clean": "rm -rf .nuxt .output node_modules",
    "clean:install": "pnpm clean && pnpm install"
  }
}
```

### Step 8.2: Development Workflow
```bash
# Start Supabase locally
pnpm db:start

# Start Nuxt dev server
pnpm dev

# Generate TypeScript types from database
pnpm db:types
```

## Phase 9: Production Checklist

### Pre-deployment
- [ ] Environment variables configured
- [ ] Database migrations tested
- [ ] pgvector indexes optimized
- [ ] Authentication flows tested
- [ ] Error handling implemented
- [ ] Loading states added
- [ ] SEO meta tags configured
- [ ] Performance optimized

### Security
- [ ] Row Level Security enabled
- [ ] API rate limiting configured
- [ ] Input validation implemented
- [ ] XSS protection verified
- [ ] CORS properly configured
- [ ] Secrets in environment variables

### Performance
- [ ] Images optimized with Nuxt Image
- [ ] Lazy loading implemented
- [ ] Code splitting configured
- [ ] Caching strategies defined
- [ ] Bundle size analyzed
- [ ] Lighthouse score > 90

### Git Configuration
- [ ] .gitignore properly configured
- [ ] .env excluded from version control
- [ ] Sensitive data removed from codebase

## Future Enhancements

### AI Features
- Implement Gemini AI for content generation
- Add PiAPI for advanced AI features
- Create AI-powered writing suggestions
- Build character dialogue generator

### Collaboration
- Real-time collaborative editing
- Comments and annotations
- Version control UI
- Team workspace management

### Advanced Features
- Export to multiple formats (DOCX, PDF, EPUB)
- Publishing integrations
- Advanced analytics dashboard
- Mobile app with Capacitor

## Resources

### Documentation
- [Nuxt 3 Documentation](https://nuxt.com)
- [Supabase Documentation](https://supabase.com/docs)
- [Tiptap Documentation](https://tiptap.dev)
- [Shadcn-vue Documentation](https://shadcn-vue.com)
- [pgvector Documentation](https://github.com/pgvector/pgvector)

### Community
- [Nuxt Discord](https://discord.com/invite/nuxt)
- [Supabase Discord](https://discord.supabase.com)
- [Vue Discord](https://discord.com/invite/vue)

### Tutorials
- [Building AI Apps with Supabase Vector](https://supabase.com/docs/guides/ai)
- [Nuxt 3 Fundamentals](https://vueschool.io/courses/nuxt-3-fundamentals)
- [Mastering Pinia](https://masteringpinia.com)

## Troubleshooting

### Common Issues

1. **TypeScript Errors**
   - Run `pnpm nuxt prepare` to generate types
   - Ensure all `@types/*` packages are installed

2. **Supabase Connection Issues**
   - Check if Supabase is running: `supabase status`
   - Verify environment variables are set correctly
   - Ensure `.env` file is in the root directory

3. **Tailwind Not Working**
   - Check if `tailwind.config.js` exists
   - Verify CSS import in `nuxt.config.ts`
   - Clear cache: `pnpm clean && pnpm install`

4. **Component Auto-imports Not Working**
   - Restart dev server
   - Check component naming conventions
   - Verify component paths in `nuxt.config.ts`

---

This guide provides a production-ready foundation for Fablecraft. Each phase builds upon the previous one, ensuring a solid, scalable architecture that can grow with your creative platform.