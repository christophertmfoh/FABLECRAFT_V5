Hello Cursor,

We are scaffolding the definitive foundation for Fablecraft using the Integrated Supabase Stack. The architecture must prioritize developer velocity, ease of management, and scalability without sacrificing power. This will be a single Nuxt 3 project with Supabase serving as our all-in-one backend.

Please execute the following setup precisely.

Phase 1: Project & Nuxt Foundation
First, create the Nuxt 3 project. This single repository will contain our entire applicationâ€”frontend UI, server routes, and backend function definitions.

Bash

# Create the project folder and navigate into it
mkdir fablecraft-app
cd fablecraft-app

# Initialize a git repository
git init

# Initialize the Nuxt 3 application
npx nuxi@latest init .

# Install all necessary dependencies in a single step
# Nuxt Modules: Supabase for backend, Tailwind for styling, Pinia for state
# UI Tools: Tiptap for the rich text editor
# Component Library: Shadcn-vue for high-quality, accessible components
pnpm add @nuxtjs/supabase @pinia/nuxt @vueuse/nuxt
pnpm add @tiptap/vue-3 @tiptap/pm @tiptap/starter-kit
pnpm add -D @nuxtjs/tailwindcss shadcn-vue radix-vue class-variance-authority clsx tailwind-merge lucide-vue-next

# Initialize Tailwind CSS configuration
npx tailwindcss init

# Initialize Shadcn UI. Accept the defaults when prompted.
npx shadcn-vue@latest init

# CRITICAL STEP: Create the placeholder page structure for the Fablecraft UI.
# This gives us the navigation and layout for our MVP showcase.
mkdir -p pages
touch pages/index.vue
mkdir -p pages/project/[id]
touch pages/project/[id]/index.vue
touch pages/project/[id]/world-bible.vue
touch pages/project/[id]/outline.vue
touch pages/project/[id]/manuscript.vue
touch pages/project/[id]/storyboard.vue
touch pages/project/[id]/pre-vis.vue
touch pages/project/[id]/scoring.vue
touch pages/project/[id]/community.vue
Phase 2: Supabase Integration & Local Setup
Now, we will integrate Supabase into our local environment. This allows us to manage database changes and functions as code.

Bash

# Install the Supabase CLI on your machine.
# This is a one-time install. If you already have it, skip this step.
# For macOS/Linux:
brew install supabase/tap/supabase
# For Windows:
scoop bucket add supabase https://github.com/supabase/scoop-bucket.git
scoop install supabase

# Initialize Supabase within our project directory.
# This will create a '/supabase' folder to manage our backend infrastructure.
supabase init
Phase 3: The Fablecraft Database Schema
This is the heart of your application. We will create the initial SQL schema. This includes enabling the vector extension for AI features from day one.

Bash

# Create the initial database migration file.
# We will write raw, high-performance SQL.
echo '
-- Enable the pgvector extension for AI-powered semantic search
create extension if not exists vector with schema extensions;

-- Create a table for public user profiles
create table profiles (
  id uuid references auth.users on delete cascade not null primary key,
  email text,
  full_name text,
  updated_at timestamptz default now()
);

-- Set up Row Level Security (RLS)
alter table profiles enable row level security;
create policy "Public profiles are viewable by everyone." on profiles for select using (true);
create policy "Users can insert their own profile." on profiles for insert with check (auth.uid() = id);
create policy "Users can update own profile." on profiles for update using (auth.uid() = id);

-- Create a table for user projects
create table projects (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users on delete cascade not null,
  name text not null,
  inserted_at timestamptz default now() not null,
  updated_at timestamptz default now() not null
);

-- Set up RLS for projects
alter table projects enable row level security;
create policy "Users can view their own projects." on projects for select using (auth.uid() = user_id);
create policy "Users can insert their own projects." on projects for insert with check (auth.uid() = user_id);
create policy "Users can update own projects." on projects for update using (auth.uid() = user_id);
create policy "Users can delete own projects." on projects for delete using (auth.uid() = user_id);

-- Create a table for documents (Manuscript, World Bible, etc.)
create table documents (
  id bigint generated by default as identity primary key,
  project_id bigint references projects on delete cascade not null,
  user_id uuid references auth.users on delete cascade not null,
  title text not null,
  type text not null, -- e.g., "MANUSCRIPT", "CHARACTER_SHEET"
  content jsonb, -- For the Tiptap editor JSON
  embedding vector(1536), -- For AI semantic search
  inserted_at timestamptz default now() not null,
  updated_at timestamptz default now() not null
);

-- Set up RLS for documents
alter table documents enable row level security;
create policy "Users can manage their own documents." on documents for all using (auth.uid() = user_id);

-- Create a function for semantic search across documents
create or replace function match_documents (
  query_embedding vector(1536),
  match_threshold float,
  match_count int
)
returns table (
  id bigint,
  title text,
  content jsonb,
  similarity float
)
language sql stable
as $$
  select
    documents.id,
    documents.title,
    documents.content,
    1 - (documents.embedding <=> query_embedding) as similarity
  from documents
  where 1 - (documents.embedding <=> query_embedding) > match_threshold
  order by similarity desc
  limit match_count;
$$;
' > supabase/migrations/20250801_initial_schema.sql
Phase 4: Scaffolding Backend Logic
Let's create our first Supabase Edge Function. This is where your server-side AI logic will live.

Bash

# Create a new Edge Function for generating text via an AI model.
supabase functions new generate-text-openai

# Now, populate that new function file with starter code.
# The file is at: supabase/functions/generate-text-openai/index.ts
echo "// Deno/TypeScript code for your Edge Function
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { OpenAI } from 'https://deno.land/x/openai/mod.ts'

// IMPORTANT: Set your OpenAI API key in the Supabase project dashboard
const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY')

serve(async (req) => {
  if (!OPENAI_API_KEY) {
    return new Response('Missing OpenAI API key', { status: 500 })
  }

  try {
    const { prompt } = await req.json()
    const openai = new OpenAI({ apiKey: OPENAI_API_KEY })

    const response = await openai.createCompletion({
      model: 'text-davinci-003', // Or a newer model
      prompt: prompt,
      temperature: 0.7,
      max_tokens: 256
    })

    return new Response(JSON.stringify(response), {
      headers: { 'Content-Type': 'application/json' },
    })
  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { 'Content-Type': 'application/json' },
      status: 400,
    })
  }
})
" > supabase/functions/generate-text-openai/index.ts
You have now completed the definitive scaffolding for Fablecraft.

Developer's Handbook & Your Immediate Next Steps
Create Your Supabase Project:

Go to supabase.com, create a free account, and start a new project.

Save your Project URL, anon key, and service_role key. You will need these.

Link Your Local Project:

In your terminal, run supabase login and follow the instructions.

Then, link your local project to the one you just created online. The project ID is in your Supabase project's URL (https://app.supabase.com/project/YOUR_PROJECT_ID).

Bash

supabase link --project-ref YOUR_PROJECT_ID
Configure Environment Variables (.env):

In your project's root directory, create a .env file and add the keys from your Supabase dashboard:

SUPABASE_URL="YOUR_PROJECT_URL"
SUPABASE_KEY="YOUR_ANON_KEY"
Push Your Database Schema:

This is a magical step. The SQL file you created will now be used to build your live database.

Bash

supabase db push
Start Developing:

Run the Nuxt development server: pnpm dev.

Open your browser to http://localhost:3000.

Begin building your UI. You can now use the Supabase client inside your Nuxt components to interact with your database, sign users up, and call your Edge Functions.

This foundation is solid, scalable, and prioritizes your ability to build and ship Fablecraft quickly. You are ready to start.